% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_boxhead_property.R
\name{set_alignment}
\alias{set_alignment}
\title{Set column alignment}
\usage{
set_alignment(x, ...)
}
\arguments{
\item{x}{A \code{tblr} table object.}

\item{...}{Expressions for the assignment of column alignment (and column specifications more generally). Expressions can be named arguments of the form \verb{<column name> = <alignment>} or make use of tidy-select. When using tidy-select, expressions have to be two-sided formulas (i.e., of the form \verb{<LHS> ~ <RHS>}). In this case, the left-hand side is used to identify selections of columns and the right-hand side to specify the column alignment. Note that the column specifications you supply are assumed to be raw LaTeX strings; characters that have a special meaning in LaTeX will not be escaped.}
}
\value{
A \code{tblr} table object.
}
\description{
Set the column alignment and other \code{colspec} properties. By default, columns will be either left-aligned ("l") or right-aligned ("r"), if they are numeric.
}
\details{
Column specifications can be more sophisticated than just left ("l"), center ("c"), and right ("r"). In \code{tabularray}, all column types are derived from the column type \code{Q}. Useful shorthands include \code{X} (to evenly distribute columns given a fixed table width) and \code{S} (to format columns using \code{siunitx}).
}
\examples{
library(dplyr)
df <- tibble(
  continent = c("Europe", "Asia", "Asia", "Europe", "Asia"),
  country = c("Germany","China", "Afghanistan","France","Taiwan"),
  value = c(0.17, 0.23, 11.3, 17, 2.4)
)

tblr(df) |>
  set_alignment(value = "X", starts_with("c") ~ "c")
}
